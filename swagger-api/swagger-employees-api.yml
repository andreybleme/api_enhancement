swagger: '2.0'
info:
  description: REST API to control employees
  title: Employees API
schemes:
  - https
paths:
  /employees/clear-cache:
    post:
      tags:
        - employees
      operationId: ClearCache
      summary: Invalidate cached data
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          headers:
            Access-Control-Allow-Origin:
              type: string
              description: URI that may access the resource
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseTemplates:
              application/json: '{"message": "Cache successfully invalidated"}'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        httpMethod: POST
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  /employees:
    get:
      tags:
        - employees
      summary: List all employees
      produces:
        - application/json
      parameters:
        - name: page
          in: query
          description: Page number of results to return.
          required: false
          type: integer
        - name: limit
          in: query
          description: Number of records to be returned in a single page.
          required: false
          type: integer
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/Employees'
          headers:
            Access-Control-Allow-Origin:
              type: string
              description: URI that may access the resource
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseTemplates:
              application/json: >-
                #if($input.params('page') == 1 and $input.params('limit') == 10)
                {
                  "results": 
                  [
                    {"id": 1, "name": "Wharley", "department":"technology"},
                    {"id": 2, "name": "Juan", "department":"technology"},
                    {"id": 3, "name": "Peter", "department":"sales"},
                    {"id": 4, "name": "Rose", "department":"sales"},
                    {"id": 5, "name": "Leo", "department":"marketing"},
                    {"id": 6, "name": "Andreas", "department":"technology"},
                    {"id": 7, "name": "Jack", "department":"sales"},
                    {"id": 8, "name": "James", "department":"sales"},
                    {"id": 9, "name": "Tom", "department":"sales"},
                    {"id": 10, "name": "Rebeca", "department":"sales"}
                  ],
                  "totalItems": 20,
                  "totalPages" 2,
                  "currentPage": $input.params('page')
                }
                #elseif($input.params('page') == 2 and $input.params('limit') == 10)
                {
                  "results": 
                  [
                    {"id": 11, "name": "Bruce", "department":"marketing"},
                    {"id": 12, "name": "Banner", "department":"sales"},
                    {"id": 13, "name": "Bond", "department":"sales"},
                    {"id": 14, "name": "Sam", "department":"technology"},
                    {"id": 15, "name": "Vincent", "department":"sales"},
                    {"id": 16, "name": "Jules", "department":"technology"},
                    {"id": 17, "name": "Wallace", "department":"sales"},
                    {"id": 18, "name": "Buch", "department":"sales"},
                    {"id": 19, "name": "Walter", "department":"technology"},
                    {"id": 20, "name": "Smith", "department":"marketing"}  
                  ],
                  "totalItems": 20,
                  "totalPages" 2,
                  "currentPage": $input.params('page')
                }
                #elseif($input.params('page') == 1 and $input.params('limit') == 5)
                {
                  "results":
                  [
                    {"id": 1, "name": "Wharley", "department":"technology"},
                    {"id": 2, "name": "Juan", "department":"technology"},
                    {"id": 3, "name": "Peter", "department":"sales"},
                    {"id": 4, "name": "Rose", "department":"sales"},
                    {"id": 5, "name": "Leo", "department":"marketing"}
                  ],
                  "totalItems": 20,
                  "totalPages" 4,
                  "currentPage": $input.params('page')
                }
                #elseif($input.params('page') == 2 and $input.params('limit') == 5)
                {
                  "results":
                  [
                    {"id": 6, "name": "Andreas", "department":"technology"},
                    {"id": 7, "name": "Jack", "department":"sales"},
                    {"id": 8, "name": "James", "department":"sales"},
                    {"id": 9, "name": "Tom", "department":"sales"},
                    {"id": 10, "name": "Rebeca", "department":"sales"}
                  ],
                  "totalItems": 20,
                  "totalPages" 4,
                  "currentPage": $input.params('page')
                }
                #elseif($input.params('page') == 3 and $input.params('limit') == 5)
                {
                  "results":
                  [
                    {"id": 11, "name": "Bruce", "department":"marketing"},
                    {"id": 12, "name": "Banner", "department":"sales"},
                    {"id": 13, "name": "Bond", "department":"sales"},
                    {"id": 14, "name": "Sam", "department":"technology"},
                    {"id": 15, "name": "Vincent", "department":"sales"}
                  ],
                  "totalItems": 20,
                  "totalPages" 4,
                  "currentPage": $input.params('page')
                }
                #elseif($input.params('page') == 4 and $input.params('limit') == 5)
                {
                  "results":
                  [
                    {"id": 16, "name": "Jules", "department":"technology"},
                    {"id": 17, "name": "Wallace", "department":"sales"},
                    {"id": 18, "name": "Buch", "department":"sales"},
                    {"id": 19, "name": "Walter", "department":"technology"},
                    {"id": 20, "name": "Smith", "department":"marketing"}
                  ],
                  "totalItems": 20,
                  "totalPages" 4,
                  "currentPage": $input.params('page')
                }
                #end
        requestParameters:
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.limit: method.request.querystring.limit
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
    post:
      tags:
        - employees
      operationId: CreateEmployee
      summary: Create an employee
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: NewEmployee
          required: true
          schema:
            $ref: '#/definitions/NewEmployee'
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/NewEmployeeResponse'
          headers:
            Access-Control-Allow-Origin:
              type: string
              description: URI that may access the resource
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        httpMethod: POST
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
    put:
      tags:
        - employees
      operationId: UpdateEmployee
      summary: Updates an employee
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: NewEmployee
          required: true
          schema:
            $ref: '#/definitions/NewEmployee'
        - name: employeeId
          in: path
          description: The id of the employee to delete
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/NewEmployeeResponse'
          headers:
            Access-Control-Allow-Origin:
              type: string
              description: URI that may access the resource
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        httpMethod: POST
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
    delete:
      tags:
        - employees
      summary: Delete a specific employee
      operationId: DeleteEmployee
      produces:
        - application/json
      parameters:
        - name: employeeId
          in: path
          description: The id of the employee to delete
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          headers:
            Access-Control-Allow-Origin:
              type: string
              description: URI that may access the resource
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.path.employeeId: method.request.path.employeeId
        passthroughBehavior: when_no_match
        httpMethod: DELETE
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
definitions:
  Employees:
    type: object
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/Employee'
      totalItems:
        type: integer
      totalPages:
        type: integer
      currentPage:
        type: integer
  Empty:
    type: object
  NewEmployeeResponse:
    type: object
    properties:
      employee:
        $ref: '#/definitions/Employee'
  Employee:
    type: object
    properties:
      id:
        type: integer
      department:
        type: string
      name:
        type: string
  NewEmployee:
    type: object
    properties:
      department:
        $ref: '#/definitions/EmployeeDepartment'
      name:
        type: string
  EmployeeDepartment:
    type: string
    enum:
      - technology
      - sales
      - secretarial
      - marketing
      - security
x-amazon-apigateway-documentation:
  version: v2.1
  createdDate: '2016-11-17T07:03:59Z'
  documentationParts:
    - location:
        type: API
      properties:
        info:
          description: THe Employees API
    - location:
        type: METHOD
        method: GET
      properties:
        tags:
          - employees
        description: Employees HTML web page containing API usage information
    - location:
        type: METHOD
        path: /emplpyees
        method: GET
      properties:
        tags:
          - employees
        summary: List all employees
    - location:
        type: METHOD
        path: /employees
        method: POST
      properties:
        tags:
          - employees
        summary: Create an employee
    - location:
        type: QUERY_PARAMETER
        path: /employees
        method: GET
        name: page
      properties:
        description: Page number of results to return.
    - location:
        type: QUERY_PARAMETER
        path: /employees
        method: GET
        name: department
      properties:
        description: The department of employees to retrieve
    - location:
        type: REQUEST_BODY
        path: /employees
        method: POST
      properties:
        description: Employee object that needs to be created
    - location:
        type: RESPONSE
        method: '*'
        statusCode: 200
      properties:
        description: Successful operation
    - location:
        type: RESPONSE_HEADER
        method: OPTIONS
        statusCode: 200
        name: Access-Control-Allow-Headers
      properties:
        description: Used in response to a preflight request to indicate which HTTP headers can be used when making the request.
    - location:
        type: RESPONSE_HEADER
        method: OPTIONS
        statusCode: 200
        name: Access-Control-Allow-Methods
      properties:
        description: Method or methods allowed when accessing the resource
    - location:
        type: RESPONSE_HEADER
        method: '*'
        statusCode: 200
        name: Access-Control-Allow-Origin
      properties:
        description: URI that may access the resource
    - location:
        type: RESPONSE_HEADER
        method: GET
        statusCode: 200
        name: Content-Type
      properties:
        description: Media type of request